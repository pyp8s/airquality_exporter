---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Build Master Branch

on:
  workflow_dispatch:
  push:
    branches:
      - master


jobs:

  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.validate_new_version.outputs.planned_version }}
      version_file_exists: ${{ steps.validate_new_version.outputs.version_file_exists }}
      tag_hash: ${{ steps.validate_new_version.outputs.tag_hash }}
      can_create: ${{ steps.validate_new_version.outputs.can_create }}
      tag_exists: ${{ steps.validate_new_version.outputs.tag_exists }}
      branch_name: ${{ steps.validate_new_version.outputs.branch_name }}

    steps:

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@1.2.0
        with:
          version_filename: ".version"
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          fail_on_error: true

      - name: Generate docker image tag out of the branch name
        id: generate_tag_from_branch
        shell: bash
        run: |
          _orig_branch_name="${{ steps.validate_new_version.outputs.branch_name }}"
          _underscored_branch_name=${_orig_branch_name//\//_}

          echo "underscored_branch_name=${_underscored_branch_name}"
          echo "underscored_branch_name=${_underscored_branch_name}" >> "${GITHUB_OUTPUT}"

      - name: Generate new/exists label for the version
        id: generate_new_exist_version_label
        shell: bash
        run: |
          _version_label="unknown"
          if [[ "${{ steps.validate_new_version.outputs.can_create }}" == "true" ]]; then
            _version_label="new"
          else
            _version_label="exists"
          fi

          echo "new_exist_version_label=${_version_label}"
          echo "new_exist_version_label=${_version_label}" >> "${GITHUB_OUTPUT}"

      - name: Send out notification about workflow start
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |-
            Workflow: <b>${{ github.repository }}</b>
            version: ${{ steps.validate_new_version.outputs.planned_version }} (${{ steps.generate_new_exist_version_label.outputs.new_exist_version_label }})
            branch: ${{ steps.validate_new_version.outputs.branch_name }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  docker_images:
    name: Build Docker images

    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}

    strategy:
      matrix:

        build_env:
          - env_name: prod
            env_suffix:

    runs-on: ubuntu-latest

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}

      APP_NAME: "airquality_exporter"

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Build Docker image - ${{ matrix.build_env.env_name }}
        id: build_docker_image
        uses: reinvented-stuff/build-docker-image-action@2.6.0
        with:
          registry_address: "ghcr.io"
          registry_username: "${{ github.actor }}"
          registry_token: "${{ secrets.GITHUB_TOKEN }}"
          name: "${{ github.repository }}"
          planned_version: ${{ env.PLANNED_VERSION }}${{ matrix.build_env.env_suffix }}
          skip_branch_suffix: true
          build_args: |
            APP_VERSION=${{ env.PLANNED_VERSION }}${{ matrix.build_env.env_suffix }}
            BUILD_ENV=${{ matrix.build_env.env_name }}


      - name: Send out notification about docker image build
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |
            Docker image: <b>${{ env.APP_NAME }}</b> v${{ env.PLANNED_VERSION }} (${{ env.BRANCH_NAME }})
            BUILD_ENV: ${{ matrix.build_env.env_name }}

            <code>${{ steps.build_docker_image.outputs.image_full_name }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  release:
    name: Release

    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}

    runs-on: ubuntu-latest

    needs:
      - validate_new_version
      - docker_images

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}

      APP_NAME: "airquality_exporter"

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create a new tag
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          --data '{"tag": "${env.PLANNED_VERSION}",
            "message": "Pipeline build tag",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "Alice from Wonderland",
              "email": "noreply@localhost.localdomain",
              "date": "${{steps.timestamp.outputs.timestamp}}"
            }'

      - name: Update the 'latest' tag
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          --data '{"tag": "latest",
            "message": "Pipeline build tag",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "Alice from Wonderland",
              "email": "noreply@localhost.localdomain",
              "date": "${{steps.timestamp.outputs.timestamp}}"
            }'

      - name: Create a Release
        id: create_release
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.PLANNED_VERSION}}
          release_name: v${{env.PLANNED_VERSION}}
          body_path: ${{steps.generate_changelog.outputs.short_changelog_export_filename}}
          draft: false
          prerelease: false

      - name: Send out notification about release
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |
            Released: <b>${{ env.APP_NAME }}</b> v${{ env.PLANNED_VERSION }} (${{ env.BRANCH_NAME }})

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"

...
